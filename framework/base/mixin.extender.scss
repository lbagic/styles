@mixin _stateExtender($selector, $states) {
  $nextStateIndex: str-index($states, $selector-state-divider);
  $currentState: $states;
  $nextState: null;
  @if $nextStateIndex {
    $currentState: str-slice($states, 0, $nextStateIndex - 1);
    $nextState: str-slice($states, $nextStateIndex + 2);
  }
  &:#{$currentState} {
    @extend #{$selector};
  }
  @if $nextState {
    @include _stateExtender($selector, $nextState);
  }
}

@mixin extendList($selectors) {
  @if $selectors != null {
    @each $selector in $selectors {
      $selector: buildSelector($selector);
      $stateIndex: str-index($selector, $selector-state-divider);
      @if $stateIndex == null {
        @extend #{$selector};
      } @else {
        $states: str-slice($selector, $stateIndex + 2);
        @if str-index($selector, '&') {
          $selector: str-slice($selector, 0, $stateIndex - 2);
          @extend #{$selector};
        } @else {
          $selector: str-slice($selector, 0, $stateIndex - 1);
        }
        @include _stateExtender($selector, $states);
      }
    }
  }
}

@mixin extendMap($map, $baseExtensions: null) {
  $localExtensions: map-get($map, extend);
  @each $key, $value in $map {
    @if $key != extend {
      &#{if($key == 'base', '', -#{$key})} {
        @if type-of($value) == 'map' {
          @include extendMap($value, $baseExtensions);
        } @else {
          @include extendList($value);
          @include extendList($baseExtensions);
          @include extendList($localExtensions);
        }
      }
    }
  }
}

@mixin extend($selector, $extensions, $baseExtensions: null) {
  #{buildSelector($selector)} {
    @if type-of($extensions) == 'map' {
      @include extendMap($extensions, $baseExtensions);
    } @else {
      @include extendList($extensions);
    }
  }
}
